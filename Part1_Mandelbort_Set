#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdbool.h>
#include <omp.h>

#define WIDTH 640
#define HEIGHT 480
#define MAX_ITER 255

struct complex{
  double real;
  double imag;
};


int cal_pixel(struct complex c) {
    

            double z_real = 0;
            double z_imag = 0;

            double z_real2, z_imag2, lengthsq;

            int iter = 0;
            do {
                z_real2 = z_real * z_real;
                z_imag2 = z_imag * z_imag;

                z_imag = 2 * z_real * z_imag + c.imag;
                z_real = z_real2 - z_imag2 + c.real;
                lengthsq =  z_real2 + z_imag2;
                iter++;
            }
            while ((iter < MAX_ITER) && (lengthsq < 4.0));

            return iter;

}

void save_pgm(const char *filename, int image[HEIGHT][WIDTH]) {
    FILE* pgmimg; 
    int temp;
    pgmimg = fopen(filename, "wb"); 
    fprintf(pgmimg, "P2\n"); // Writing Magic Number to the File   
    fprintf(pgmimg, "%d %d\n", WIDTH, HEIGHT);  // Writing Width and Height
    fprintf(pgmimg, "255\n");  // Writing the maximum gray value 
    int count = 0; 
    
    for (int i = 0; i < HEIGHT; i++) { 
        for (int j = 0; j < WIDTH; j++) { 
            temp = image[i][j]; 
            fprintf(pgmimg, "%d ", temp); // Writing the gray values in the 2D array to the file 
        } 
        fprintf(pgmimg, "\n"); 
    }
    fclose(pgmimg); 
} 


int main() {

    int (*imageSeq)[WIDTH] = malloc(HEIGHT * sizeof(*imageSeq));
    double seq_time, par_time = 0;

    for(int z = 0;z<=16;z+=2){
        
        if(z==0)
            z = 1; // The first iteration will be for 1 thread. The next one will be for 2 threads, then 4, then 6, ...

        int (*image)[WIDTH] = malloc(HEIGHT * sizeof(*image));
        
        double AVG = 0;
        int N = 10; // number of trials
        double total_time[N];
        struct complex c;
        int i,j;
        for (int k=0; k<N; k++){
        clock_t start_time = clock(); // Start measuring time
        #pragma omp parallel for schedule(dynamic,1) private(c,j) num_threads(z) // This directive is discussed in the word document
            for (i = 0; i < HEIGHT; i++) {
                for (j = 0; j < WIDTH; j++) {
                    c.real = (j - WIDTH / 2.0) * 4.0 / WIDTH;
                    c.imag = (i - HEIGHT / 2.0) * 4.0 / HEIGHT;
                    image[i][j] = cal_pixel(c);
                }
            }
        clock_t end_time = clock(); // End measuring time

        total_time[k] = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
        printf("Execution time of trial [%d]: %f seconds\n", k , total_time[k]);
        AVG += total_time[k];
        }

        save_pgm("mandelbrot.pgm", image);
        printf("The average execution time of 10 trials using %d threads is: %f ms\n\n", z,AVG/N*1000);

        if(z==1){// This executes only one time when the code runs for the first iteration
            seq_time = AVG/N*1000;
            z=0; //so that the next loop starts at 2, where it wil do z+=2, so 0+=2 => 2
            for (int i = 0; i < HEIGHT; i++) {
                for (int j = 0; j < WIDTH; j++) {
                   imageSeq[i][j]=image[i][j];
                }
            }
        }
        else{ // when having multiple threads, for parallel execution
            par_time = AVG/N*1000;
            printf("The SpeedUp is: %f\n\n",seq_time/par_time);
            printf("The Efficiency is: %f\n\n",((seq_time/par_time)/z)*100);
        }

        // This will check that both images the one obtained from the sequentail code and the one obtained from the parallel one are identical

        bool images_are_identical = true;
        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                if (abs(imageSeq[i][j] - image[i][j]) > 1) {
                    images_are_identical = false;
                    break;
                }
            }
            if (!images_are_identical) {
                printf("**** The images are different.***\n\n\n");
                break;
            }
        }
        if(images_are_identical){
            printf("Images are identical\n\n\n");
        }   
    }
    return 0;
}
